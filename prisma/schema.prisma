// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String   @unique
  password        String
  role            UserRole
  avatarUrl       String?
  discordUsername String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Team            Team[]
}

model Sponsors {
  id          String  @id @default(cuid())
  companyName String
  description String
  logo        String
  website     String?
}

model BecomeSponsor {
  id          String @id @default(cuid())
  name        String
  email       String
  companyName String
  message     String
}

model Tournament {
  id                 String         @id @default(cuid())
  name               String
  description        String
  image              String
  startDateTime      DateTime
  endDateTime        DateTime
  isRegistrationOpen Boolean        @default(true)
  prizePool          Int
  streamingUrl       String?
  maxTeamCount       Int?
  maxTeamPlayers     Int?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  Registration       Registration[]
  Team               Team[]
  Leaderboard        Leaderboard[]
}

model Registration {
  id           String     @id @default(cuid())
  tournamentId String
  teamId       String     @unique
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  team         Team       @relation(fields: [teamId], references: [id])
}

model Team {
  id           String         @id @default(cuid())
  teamName     String
  tournamentId String
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  TeamPlayer   String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Registration Registration[]
  Leaderboard  Leaderboard[]
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?
}

model Leaderboard {
  id           String     @id @default(cuid())
  teamId       String     @unique
  tournamentId String
  points       Int
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}
